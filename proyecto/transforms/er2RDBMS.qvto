 modeltype ER uses 'simpleE';
 modeltype RDB uses 'SimpleRDBMS';

transformation er2RDBMS(in er : ER, out RDB);

main() {
	er.rootObjects()[ER::DiagramER]->map diagrama2Schema();

}

mapping ER::DiagramER::diagrama2Schema() : RDB::Schema {
	name:= self.name;
	tables := self.entities->select(e|e.needTable())-> map entity2Table() ->asOrderedSet();
	tables := tables->union(self.relations -> select(r|r.cardinality.toString()="N...N")-> relNN2table()->asOrderedSet());
	
	
	tables := tables->union(ER::Attribute.allInstances()->select(a|a.isMultivalued)->map multiv2table());
	
	self.relations->select(r|r.cardinality.toString()<>"N...N")->map tabulateRel();
	
}

helper ER::Entity::needTable(): Boolean{

	if (self.child->size()>0 and (self.isSourceOf->size()=0) and (self.isDestinationOf->size()=0) 
		and not(self.hasMultiv()) and not (self.childHasIntersection)){
		
		return false;
	};
	
	return true;
}


mapping ER::Attribute::multiv2table():RDB::Table{
	name:= "Multivalue_"+self.name;
	columns:=self.ofEntity.map entity2Table().keys->select(k|k.isPrimary)->first().columns->map copyColumn(result);
	columns:=columns->union(self.map multiv2Column()->asOrderedSet());
	var colkey:=columns;
	var ownerkey:=result;
	keys:= object RDB::Key{
						name:="pk_multiv_"+self.name;
						isPrimary:=true;
						columns:=colkey;
						owner:=ownerkey;
						}; 
	
	foreignKeys:=self.ofEntity.obtainKeys()[Primary_keys]->asOrderedSet()->first().map keyER2keyRDB(self.ofEntity.map entity2Table()).map Key2FK(result);
	
	
}

mapping ER::Attribute::multiv2Column():RDB::Column{
	name := self.name;
	owner:= self.ofEntity.map entity2Table();
	type:= self.type.toString();

}



mapping ER::Relationship::tabulateRel(){
	
	//caso n..1, 1.1
	var emisor = self.destination; //tabulado es el que recibe los atributos de la relacion y el otro es emisor
	var tabulado = self.source;
	
	if(self.cardinality.toString()="1...N"){ //caso 1.N
		tabulado := self.destination;
		emisor := self.source;
	
	};	
	
		
		var tablecols:=tabulado.map entity2Table().columns->asOrderedSet() ;
		
		var relkeycols:=emisor.map entity2Table().keys->select(k|k.isPrimary).columns->map copyColumn(self.name,tabulado.map entity2Table())->asOrderedSet();
		
		var relcols:=self.attributes->map attribute2Column(self.name,tabulado.map entity2Table())->asOrderedSet();
		
		tabulado.map entity2Table().columns:=tablecols->union(relkeycols->union(relcols));
		
		
		var newFK=tabulado.map entity2Table().foreignKeys->asSet();
		newFK := newFK->union(emisor.map entity2Table().keys->select(k|k.isPrimary)->first().map Key2FK(self.name,tabulado.map entity2Table())->asOrderedSet());
		tabulado.map entity2Table().foreignKeys:=newFK;
		
}


mapping RDB::Key::Key2FK(own: RDB::Table):RDB::ForeignKey{
	name:="FK_to_"+self.owner.name+"_"+self.name;
	refersTo:=self;
	columns:=self.columns;
	owner:=own;

}

mapping RDB::Key::Key2FK(prefix:String,own: RDB::Table):RDB::ForeignKey{
	name:="FK_to_"+self.owner.name+"_"+self.name;
	refersTo:=self;
	columns:=self.columns->map copyColumn(prefix,own);
	owner:=own;

}



mapping ER::Relationship::relNN2table() : RDB::Table{
	name:=self.name;
	schema:=self.diagram.map diagrama2Schema();
	columns:=self.obtenerColumnasRelNN(result);
	keys:=self.map obtainPKofRelNN()->asOrderedSet();
	foreignKeys:=self.map obtainFKofRelNN()->asOrderedSet()
	
	
	
}

helper ER::Relationship::obtainFKofRelNN() : Set(RDB::ForeignKey){


var own:=self.map relNN2table();

if(self.source=self.destination){
	var namefk1:="FK_"+self.name+"_source";
	var namefk2:="FK_"+self.name+"_destination";
	var colsfk1 :=self.source.obtainKeys()[Primary_keys]->asOrderedSet()->first().attributes->map attribute2Column("source",self.map relNN2table());
	var colsfk2 :=self.destination.obtainKeys()[Primary_keys]->asOrderedSet()->first().attributes->map attribute2Column("destination",self.map relNN2table());
	var fk :=object RDB::ForeignKey{
					name:=namefk1;
					refersTo:=self.source.map entity2Table().keys->select(k|k.isPrimary)->first();
					columns:=colsfk1;
					owner:=own;			
				};
	var fk2:=object RDB::ForeignKey{
					name:=namefk2;
					refersTo:=self.destination.map entity2Table().keys->select(k|k.isPrimary)->first();
					columns:=colsfk2;
					owner:=own;			
				};
	
	var fks := fk->asSet();
	fks := fks->union(fk2->asSet());
	return fks;
	
	
	}else{
	var namefk1:="FK_"+self.name+"_"+self.source.name;
	var namefk2:="FK_"+self.name+"_"+self.destination.name;
	var colsfk1 :=self.source.obtainKeys()[Primary_keys].attributes-> map  attribute2Column(self.map relNN2table());
	var colsfk2 :=self.destination.obtainKeys()[Primary_keys].attributes-> map  attribute2Column(self.map relNN2table());
	
	var fk :=object RDB::ForeignKey{
					name:=namefk1;
					refersTo:=self.source.map entity2Table().keys->select(k|k.isPrimary)->first();
					columns:=colsfk1;
					owner:=own;			
				};
	var fk2:=object RDB::ForeignKey{
					name:=namefk2;
					refersTo:=self.destination.map entity2Table().keys->select(k|k.isPrimary)->first();
					columns:=colsfk2;
					owner:=own;			
				};
	
	var fks := fk->asSet();
	fks := fks->union(fk2->asSet());
	
	return fks;
	};
	
	
return null;

}







mapping ER::Relationship::obtainPKofRelNN() : RDB::Key{
result.isPrimary:=true;
result.name:="PK"+self.name;
result.owner:=self.map relNN2table();

if(self.source=self.destination){
	var col :=self.source.obtainKeys()[Primary_keys]->asOrderedSet()->first().attributes->map attribute2Column("source",self.map relNN2table());
	col :=col->union(self.destination.obtainKeys()[Primary_keys]->asOrderedSet()->first().attributes->map attribute2Column("destination",self.map relNN2table()));
	result.columns:= col;
	
	}else{
	
	var col :=self.source.obtainKeys()[Primary_keys].attributes;
	col :=col->union(self.destination.obtainKeys()[Primary_keys].attributes);
	result.columns:= col-> map  attribute2Column(self.map relNN2table());
	}



}



query ER::Relationship::obtenerColumnasRelNN(own :RDB::Table) : Set(RDB::Column)
{
	var col := self.attributes->asOrderedSet()->map attribute2Column(own);
	
	if(self.source=self.destination){
		col:=col->union(self.source.obtainKeys()[Primary_keys]->asOrderedSet()->first().attributes->attribute2Column("source",own));
		col := col->union(self.destination.obtainKeys()[Primary_keys]->asOrderedSet()->first().attributes->attribute2Column("destination",own));
	
	}else{
	
	 col:=col->union(self.source.obtainKeys()[Primary_keys]->asOrderedSet()->first().attributes->attribute2Column(own));
	 col := col->union(self.destination.obtainKeys()[Primary_keys]->asOrderedSet()->first().attributes->attribute2Column(own));
	};
	
	
	
	
	return (col->asOrderedSet());
	
}


mapping ER::Entity::entity2Table() : RDB::Table{
	name:=self.name;
	schema:=self.diagram.map diagrama2Schema();
	
	
	
	columns := self.attributes->select(a|a.isMultivalued=false) -> map attribute2Column(result);
	
	if(self.superclass<>null and not(self.superclass.needTable())){
		columns:=self.superclass.attributes->map attribute2Column(result)->asOrderedSet()->union(columns);
	};
	
	keys:= self.keys->map keyER2keyRDB(result);
	if(self.superclass<>null){
		keys:=keys->union(self.superclass.keys->map keyER2keyRDB(result)->asOrderedSet());
	};
}


helper ER::Entity::hasMultiv():Boolean{
	return self.attributes->select(a|a.isMultivalued)->size()>0;
}


mapping ER::Key::keyER2keyRDB(own: RDB::Table) : RDB::Key{
	if(self.oclIsTypeOf(Primary_keys)){
		result.isPrimary:=true;
	};
	
	name:=self.name+"_"+own.name;
	
	owner:=own;
	columns:= self.attributes.map attribute2Column(owner);
}



mapping ER::Attribute::attribute2Column( own:RDB::Table) : RDB::Column{
	name:=self.name;
	if(self.ofRelationship<>null){
		name:=self.ofRelationship.name+"_"+name;
	};
	
	type:=self.type.toString();
	owner:=own;
}
mapping ER::Attribute::attribute2Column(prefix:String, own:RDB::Table) : RDB::Column{
	name:=prefix+"_"+self.name;
	if(self.ofRelationship<>null){
		name:=self.ofRelationship.name+"_"+name;
	};
	
	type:=self.type.toString();
	owner:=own;
}

mapping  RDB::Column::copyColumn( own:RDB::Table) : RDB::Column{
	name:=self.name;
	type:=self.type;
	owner:=own;
}
mapping  RDB::Column::copyColumn(prefix:String, own:RDB::Table) : RDB::Column{
	name:=prefix+"_"+self.name;
	
	
	type:=self.type;
	owner:=own;
}


query ER::Entity:: obtainRelationships() : Set(ER::Relationship){

	return Relationship.allInstances()->select(r | r.source=self or r.destination=self )->asOrderedSet();

}

query ER::Entity:: obtainKeys() : Set(Key){
	
	if(self.superclass<>null){
		 return self.keys->union(self.superclass.obtainKeys());	
			};
	
	return self.keys;

}
