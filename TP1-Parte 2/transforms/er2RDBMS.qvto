 modeltype ER uses 'simpleE';
 modeltype RDB uses 'SimpleRDBMS';

transformation er2RDBMS(in er : ER, out RDB);

main() {
	er.rootObjects()[ER::DiagramER]->map diagrama2Schema();

}

mapping ER::DiagramER::diagrama2Schema() : RDB::Schema {
	name:= self.name;
	tables := self.entities->select(e|e.needTable())-> map entity2Table() ->asOrderedSet();
	tables := tables->union(self.relations -> select(r|r.cardinality.toString()="N...N")-> relNN2table()->asOrderedSet());
	
	
	tables := tables->union(ER::Attribute.allInstances()->select(a|a.isMultivalued)->map multiv2table());
	
	self.relations->select(r|r.cardinality.toString()<>"N...N")->map tabulateRel();
	
}

helper ER::Entity::needTable(): Boolean{

	if (self.child->size()>0 and (self.isSourceOf->size()=0) and (self.isDestinationOf->size()=0) 
		and not(self.hasMultiv()) and not (self.childHasIntersection)){
		
		return false;
	};
	
	return true;
}


mapping ER::Attribute::multiv2table():RDB::Table{
	name:= "Multivalue_"+self.name;
	columns:=self.ofEntity.map entity2Table().keys->select(k|k.isPrimary)->first().columns->map copyColumn(result);
	columns:=columns->union(self.map multiv2Column()->asOrderedSet());
	var colkey:=columns;
	var ownerkey:=result;
	keys:= object RDB::Key{
						name:="pk_multiv_"+self.name;
						columns:=colkey;
						owner:=ownerkey;
						}; 
	
	foreignKeys:=self.ofEntity.keys[Primary_keys]->first().map keyER2keyRDB(self.ofEntity.map entity2Table()).map Key2FK();
	
	
}

mapping ER::Attribute::multiv2Column():RDB::Column{
	name := self.name;
	owner:= self.ofEntity.map entity2Table();
	type:= self.type.toString();

}



mapping ER::Relationship::tabulateRel(){
	if(self.cardinality.toString()="1...N"){
		var newcols:=self.destination.map entity2Table().columns->asSet() ;
		newcols:=newcols->union(self.source.keys[Primary_keys].attributes->map attribute2Column(self.destination.map entity2Table())->asOrderedSet());
		newcols:=newcols->union(self.attributes->map attribute2Column(self.destination.map entity2Table())->asOrderedSet());
		
		self.destination.map entity2Table().columns:=newcols;
		
		
		var newFK=self.destination.map entity2Table().foreignKeys->asSet();
		newFK := newFK->union(self.source.map entity2Table().keys->select(k|k.isPrimary)->first().map Key2FK()->asOrderedSet());
		self.destination.map entity2Table().foreignKeys:=newFK;
		
	}else{ // si es N a 1 o si 1 a 1
		var newcols:=self.source.map entity2Table().columns->asSet() ;
		
		newcols:=newcols->union(self.destination.keys[Primary_keys].attributes->map attribute2Column(self.source.map entity2Table())->asOrderedSet());
		
		newcols:=newcols->union(self.attributes->map attribute2Column(self.source.map entity2Table())->asOrderedSet());
		
		self.source.map entity2Table().columns:=newcols;
		var newFK=self.source.map entity2Table().foreignKeys->asSet();
		newFK := newFK->union(self.destination.map entity2Table().keys->select(k|k.isPrimary)->first().map Key2FK()->asOrderedSet());
		self.source.map entity2Table().foreignKeys:=newFK;
	};

	
}


mapping RDB::Key::Key2FK():RDB::ForeignKey{
	name:="FK_to_"+self.owner.name+"_"+self.name;
	refersTo:=self;
	columns:=self.columns;
	

}


mapping ER::Relationship::relNN2table() : RDB::Table{
	name:=self.name;
	schema:=self.diagram.map diagrama2Schema();
	columns:=self.obtenerColumnasRelNN()->map attribute2Column(result);
	keys:=self.map obtainPKofRelNN()->asOrderedSet();	
}



mapping ER::Relationship::obtainPKofRelNN() : RDB::Key{
result.isPrimary:=true;
result.name:="PK"+self.name;
result.owner:=self.map relNN2table();
var col :=self.source.obtainKeys()[Primary_keys].attributes;
	col :=col->union(self.destination.obtainKeys()[Primary_keys].attributes);
result.columns:= col-> map  attribute2Column(self.map relNN2table());


}



query ER::Relationship::obtenerColumnasRelNN() : Set(ER::Attribute)
{
	var col:=self.source.obtainKeys()[Primary_keys].attributes;
	col := col->union(self.destination.obtainKeys()[Primary_keys].attributes);
	col := col->union(self.attributes);
	return (col->asOrderedSet());
	
}





mapping ER::Entity::entity2Table() : RDB::Table{
	name:=self.name;
	schema:=self.diagram.map diagrama2Schema();
	
	
	
	columns := self.attributes->select(a|a.isMultivalued=false) -> map attribute2Column(result);
	
	if(self.superclass<>null and not(self.superclass.needTable())){
		columns:=self.superclass.attributes->map attribute2Column(result)->asOrderedSet()->union(columns);
	};
	
	keys:= self.keys->map keyER2keyRDB(result);
	if(self.superclass<>null){
		keys:=keys->union(self.superclass.keys->map keyER2keyRDB(result)->asOrderedSet());
	};
}


helper ER::Entity::hasMultiv():Boolean{
	return self.attributes->select(a|a.isMultivalued)->size()>0;
}












mapping ER::Key::keyER2keyRDB(own: RDB::Table) : RDB::Key{
	if(self.oclIsTypeOf(Primary_keys)){
		result.isPrimary:=true;
	};
	
	name:=self.name;
	
	owner:=own;
	columns:= self.attributes.map attribute2Column(owner);
}

mapping ER::Attribute::attribute2Column( own:RDB::Table) : RDB::Column{
	name:=self.name;
	if(self.ofRelationship<>null){
	name:=self.ofRelationship.name+"_"+name;
	};
	
	type:=self.type.toString();
	owner:=own;
}

mapping  RDB::Column::copyColumn( own:RDB::Table) : RDB::Column{
	name:=self.name;
	
	
	type:=self.type;
	owner:=own;
}



query ER::Entity:: obtainRelationships() : Set(ER::Relationship){

	return Relationship.allInstances()->select(r | r.source=self or r.destination=self )->asOrderedSet();

}

query ER::Entity:: obtainKeys() : Set(Key){
	return self.keys;
}
