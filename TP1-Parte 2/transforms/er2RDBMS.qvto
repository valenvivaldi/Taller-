 modeltype ER uses 'simpleE';
 modeltype RDB uses 'SimpleRDBMS';

transformation er2RDBMS(in er : ER, out RDB);

main() {
	er.rootObjects()[ER::DiagramER]->map diagrama2Schema();

}

mapping ER::DiagramER::diagrama2Schema() : RDB::Schema {
	name:= self.name;
	tables := (self.entities-> map entity2Table()) ->asOrderedSet();
	tables := tables->union(self.relations -> select(r|r.cardinality.toString()="N...N")-> relNN2table()->asOrderedSet());
	self.entities->select(e| (e.child!=null) and (e.obtainRelationships()->size()=0))->map transferAttrToChild();
	
}



query ER::Entity::transferAttrToChild(){
var tablaPadre=self.map entity2Table();
var tablaHijo=self.map entity2Table();

tablaPadre.columns->MAPchangeColOwner(tablaHijo);
tablaHijo.columns := tablaPadre.columns->union(tablaHijo.columns);

tablaPadre.keys->MAPchangeKeyOwner(tablaHijo);

tablaHijo.keys := tablaPadre.keys->union(tablaHijo.keys);

}

query RDB::Column::MAPchangeColOwner(in nuevo:RDB::Table){
 changeColOwner(self,nuevo);
}

helper changeColOwner(out column:RDB::Column,in nuevo:RDB::Table){
 column.owner:=nuevo;
}

query RDB::Key::MAPchangeKeyOwner(in nuevo:RDB::Table){
 changeKeyOwner(self,nuevo);
}

helper changeKeyOwner(out key:RDB::Key,in nuevo:RDB::Table){
 key.owner:=nuevo;
}

mapping ER::Relationship::relNN2table() : RDB::Table{
	name:=self.name;
	schema:=self.diagram.map diagrama2Schema();
	
	columns:=self.obtenerColumnasRelNN()->map attribute2Column(result);
	
	
	keys:=self.map obtainPKofRelNN()->asOrderedSet();
	
}



mapping ER::Relationship::obtainPKofRelNN() : RDB::Key{
result.isPrimary:=true;
result.name:="PK"+self.name;
result.owner:=self.map relNN2table();
var col :=self.source.obtainKeys()[Primary_keys].attributes;
	col :=col->union(self.destination.obtainKeys()[Primary_keys].attributes);
result.columns:= col-> map  attribute2Column(self.map relNN2table());


}



query ER::Relationship::obtenerColumnasRelNN() : Set(ER::Attribute)
{
	var col:=self.source.obtainKeys()[Primary_keys].attributes;
	col := col->union(self.destination.obtainKeys()[Primary_keys].attributes);
	col := col->union(self.attributes);
	return (col->asOrderedSet());
	
}





mapping ER::Entity::entity2Table() : RDB::Table{
	name:=self.name;
	schema:=self.diagram.map diagrama2Schema();
	columns := self.attributes -> map attribute2Column(result);
	keys:= self.keys->map keyER2keyRDB();
}













mapping ER::Key::keyER2keyRDB() : RDB::Key{
	if(self.oclIsTypeOf(Primary_keys)){
		result.isPrimary:=true;
	};
	
	name:=self.name;
	
	owner:=self.entityKey.map entity2Table();
	columns:= self.attributes.map attribute2Column(owner);
}

mapping ER::Attribute::attribute2Column(in dueño: RDB::Table) : RDB::Column{
	name:=self.name;
	type:=self.type.toString();
	owner:=dueño
}



query ER::Entity:: obtainRelationships() : Set(ER::Relationship){

	return Relationship.allInstances()->select(r | r.source=self or r.destination=self )->asOrderedSet();

}

query ER::Entity:: obtainKeys() : Set(Key){
	return self.keys;
}
